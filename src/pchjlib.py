# pchjlib.py
################################################################################################
#
# Copyright (c) 2024 Joesifer
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################################

"""
PCHJLIBüò∫
===============================================================================
-------------------------------------------------------------------------------
T√°c gi·∫£
-------------------------------------------------------------------------------
- Joesifer.

Phi√™n b·∫£n
-------------------------------------------------------------------------------
- 0.1.5.1

Ng√†y ƒëƒÉng
-------------------------------------------------------------------------------
- Ng√†y 14 th√°ng 2, nƒÉm 2024.

B·∫£n quy·ªÅn
-------------------------------------------------------------------------------
- Copyright (c) 2024 Joesifer.

Phi√™n b·∫£n python ƒë∆∞·ª£c h·ªó tr·ª£.
-------------------------------------------------------------------------------
- L·ªõn h∆°n ho·∫∑c b·∫±ng 3.7.

Th∆∞ vi·ªán ph·ª• thu·ªôc.
-------------------------------------------------------------------------------
- math, re, sys, time (numpy, roman).

Gi·∫•y ph√©p.
-------------------------------------------------------------------------------
- MIT License.

Th√¥ng tin.
-------------------------------------------------------------------------------

N·∫øu b·∫°n c·∫ßn h∆∞·ªõng d·∫´n c√°ch d√πng th√¨ h√£y::

  >>> Truy c·∫≠p: `https://github.com/Joesifer/pchjlib/blob/main/README.md`.

V√† b·∫°n c√≥ th·ªÉ g√≥p √Ω ho·∫∑c ·ªßng h·ªô b·∫±ng::

  >>> G·ª≠i email : `phanchanhung12055@gmail.com` .


C·∫¢M ∆†N!!!
===============================================================================

"""

import math, random, re, sys, time

__author__ = "Joesifer (phanchanhung12055@gmail.com)"
__copyright__ = "Copyright (c) 2024 Joesifer"


# C√°c class l·ªói t√πy ch·ªânh
class MathError(Exception):
    """L·ªói c∆° b·∫£n li√™n quan ƒë·∫øn to√°n h·ªçc."""

    pass


class OutOfRangeError(MathError):
    """L·ªói khi gi√° tr·ªã n·∫±m ngo√†i ph·∫°m vi cho ph√©p."""

    pass


class NotIntegerError(MathError):
    """L·ªói khi gi√° tr·ªã kh√¥ng ph·∫£i s·ªë nguy√™n."""

    pass


class InvalidInputError(MathError):
    """L·ªói khi ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá."""

    pass


class DivisionByZeroError(MathError):
    """L·ªói khi chia cho 0."""

    pass


class TypeErrorCustom(MathError):
    """L·ªói khi ki·ªÉu d·ªØ li·ªáu kh√¥ng ph√π h·ª£p."""

    pass


class ListError(MathError):
    """L·ªói li√™n quan ƒë·∫øn danh s√°ch ƒë·∫ßu v√†o."""

    pass


# Ki·ªÉm tra v√† import c√°c th∆∞ vi·ªán ph·ª• thu·ªôc
try:
    import numpy
except ImportError:
    numpy = None

try:
    import roman
except ImportError:
    roman = None


# C√°c h√†m ki·ªÉm tra s·ªë nguy√™n t·ªë v√† s·ªë li√™n quan
def kiem_tra_so_nguyen_to(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë nguy√™n t·ªë hay kh√¥ng.

    Tham s·ªë:
        - number (int ho·∫∑c float) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ v·ªÅ:
        - True n·∫øu l√† s·ªë nguy√™n t·ªë, False n·∫øu kh√¥ng (bool).

    N√©m l·ªói:
        - InvalidInputError n·∫øu ƒë·∫ßu v√†o kh√¥ng ph·∫£i s·ªë nguy√™n.
        - V√≠ d·ª•: kiem_tra_so_nguyen_to(7) ‚Üí True, kiem_tra_so_nguyen_to(3.5) ‚Üí l·ªói "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá".
    """

    def miller_rabin(n, k=5):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0:
            return False

        def check(a, s, d, n):
            x = pow(a, d, n)
            if x == 1:
                return True
            for _ in range(s - 1):
                if x == n - 1:
                    return True
                x = (x * x) % n
            return x == n - 1

        s = 0
        d = n - 1
        while d % 2 == 0:
            s += 1
            d //= 2

        for _ in range(k):
            a = random.randrange(2, n - 1)
            if not check(a, s, d, n):
                return False
        return True

    try:
        if not isinstance(number, int):
            raise InvalidInputError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        return miller_rabin(number)
    except (ValueError, TypeError):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def tao_danh_sach_so_nguyen_to(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë nguy√™n t·ªë t·ª´ 0 ƒë·∫øn limit b·∫±ng thu·∫≠t to√°n Sieve.

    Tham s·ªë:
        - limit (int ho·∫∑c float) - Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ v·ªÅ:
        - Danh s√°ch c√°c s·ªë nguy√™n t·ªë (list).

    N√©m l·ªói:
        - InvalidInputError n·∫øu limit kh√¥ng ph·∫£i s·ªë nguy√™n >= 2.
        - V√≠ d·ª•: tao_danh_sach_so_nguyen_to(10) ‚Üí [2, 3, 5, 7].
    """
    try:
        if numpy is None:
            raise ImportError(
                "H√†m n√†y y√™u c·∫ßu c√†i ƒë·∫∑t numpy. H√£y ch·∫°y: pip install numpy"
            )
        else:
            if isinstance(limit, float) and not limit.is_integer():
                raise InvalidInputError(
                    "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n"
                )
            limit = int(limit)
            if limit < 2:
                raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi·ªõi h·∫°n ph·∫£i >= 2")
            if numpy is not None:
                sieve = numpy.ones(
                    limit + 1, dtype=bool
                )  # Ph√¢n b·ªï tr∆∞·ªõc b·ªô nh·ªõ v·ªõi numpy
                sieve[0:2] = False
                for i in range(2, int(limit**0.5) + 1):
                    if sieve[i]:
                        sieve[i * i : limit + 1 : i] = False
                return numpy.where(sieve)[0].tolist()
            else:
                sieve = [True] * (limit + 1)  # Ph√¢n b·ªï tr∆∞·ªõc b·ªô nh·ªõ
                sieve[0] = sieve[1] = False
                for i in range(2, int(limit**0.5) + 1):
                    if sieve[i]:
                        for j in range(i * i, limit + 1, i):
                            sieve[j] = False
                return [i for i in range(limit + 1) if sieve[i]]
    except (ValueError, TypeError):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi·ªõi h·∫°n kh√¥ng ph·∫£i s·ªë nguy√™n")


def kiem_tra_so_emirp(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë emirp (s·ªë nguy√™n t·ªë ƒë·∫£o ng∆∞·ª£c c≈©ng l√† nguy√™n t·ªë) hay kh√¥ng.

    Tham s·ªë:
        - number (int ho·∫∑c float) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ v·ªÅ:
        - True n·∫øu l√† s·ªë emirp, False n·∫øu kh√¥ng (bool).

    N√©m l·ªói:
        - InvalidInputError n·∫øu ƒë·∫ßu v√†o kh√¥ng ph·∫£i s·ªë nguy√™n d∆∞∆°ng.
        - V√≠ d·ª•: kiem_tra_so_emirp(31) ‚Üí True v√¨ 31 c≈©ng l√† s·ªë nguy√™n t·ªë,
                 kiem_tra_so_emirp(3.5) ‚Üí l·ªói "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá".
    """
    try:
        if isinstance(number, float) and not number.is_integer():
            raise InvalidInputError(
                "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: S·ªë th·ª±c kh√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n"
            )
        number = int(number)
        if number < 2:
            raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: S·ªë ph·∫£i >= 2")
        if not kiem_tra_so_nguyen_to(number):
            return False
        reversed_number = int(str(number)[::-1])
        return kiem_tra_so_nguyen_to(reversed_number)
    except (ValueError, TypeError):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi√° tr·ªã kh√¥ng ph·∫£i s·ªë nguy√™n")


def tao_danh_sach_so_emirp(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë emirp t·ª´ 0 ƒë·∫øn limit.

    Tham s·ªë:
        - limit (int ho·∫∑c float) - Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ v·ªÅ:
        - Danh s√°ch c√°c s·ªë emirp (list).

    N√©m l·ªói:
        - InvalidInputError n·∫øu limit kh√¥ng ph·∫£i s·ªë nguy√™n kh√¥ng √¢m.
    """
    try:
        if isinstance(limit, float) and not limit.is_integer():
            raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
        limit = int(limit)
        if limit < 0:
            raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi·ªõi h·∫°n ph·∫£i kh√¥ng √¢m")
        return [i for i in range(2, limit) if kiem_tra_so_emirp(i)]
    except (ValueError, TypeError):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi·ªõi h·∫°n kh√¥ng ph·∫£i s·ªë nguy√™n")


# C√°c h√†m Fibonacci
def vi_tri_so_Fibonacci(index):
    """
    T√≠nh s·ªë Fibonacci th·ª© index b·∫±ng ph∆∞∆°ng ph√°p l·∫∑p v√† ch·ªâ ch·∫•p nh·∫≠n index ki·ªÉu int kh√¥ng √¢m.

    Tham s·ªë:
        - index (int) - V·ªã tr√≠ c·ªßa s·ªë Fibonacci (b·∫Øt ƒë·∫ßu t·ª´ 0).

    Tr·∫£ v·ªÅ:
        - S·ªë Fibonacci t·∫°i v·ªã tr√≠ index (int).

    N√©m l·ªói:
        - InvalidInputError n·∫øu index kh√¥ng ph·∫£i s·ªë nguy√™n kh√¥ng √¢m.
    """
    if not isinstance(index, int) and not isinstance(index, bool):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Ph·∫£i l√† s·ªë nguy√™n")

    if index < 0:
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m")

    a, b = 0, 1
    for _ in range(index):
        a, b = b, a + b
    return a


def tao_danh_sach_so_Fibonacci(count):
    """
    T·∫°o danh s√°ch count s·ªë Fibonacci ƒë·∫ßu ti√™n.

    Tham s·ªë:
        - count (int ho·∫∑c float) - S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ trong danh s√°ch.

    Tr·∫£ v·ªÅ:
        - Danh s√°ch c√°c s·ªë Fibonacci (list).

    N√©m l·ªói:
        - InvalidInputError n·∫øu count kh√¥ng ph·∫£i s·ªë nguy√™n kh√¥ng √¢m.
    """
    try:
        if isinstance(count, float) and not count.is_integer():
            raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n")
        count = int(count)
        if count < 0:
            raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: S·ªë l∆∞·ª£ng ph·∫£i kh√¥ng √¢m")
        return [vi_tri_so_Fibonacci(i) for i in range(count)]
    except (ValueError, TypeError):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: S·ªë l∆∞·ª£ng kh√¥ng ph·∫£i s·ªë nguy√™n")


# C√°c h√†m t√≠nh s·ªë ho√†n thi·ªán, t·ª± m√£n, h·ªØu h·∫£o, ho√†n h√†o, th√¢n thi·∫øt
def tong_uoc_so(number):
    """
    T√≠nh t·ªïng c√°c ∆∞·ªõc s·ªë d∆∞∆°ng c·ªßa number (kh√¥ng t√≠nh ch√≠nh n√≥).

    Tham s·ªë:
        - number (int ho·∫∑c float) - S·ªë c·∫ßn t√≠nh t·ªïng ∆∞·ªõc s·ªë.

    Tr·∫£ v·ªÅ:
        - T·ªïng c√°c ∆∞·ªõc s·ªë (int).

    N√©m l·ªói:
        - MathError n·∫øu number <= 0, InvalidInputError n·∫øu kh√¥ng ph·∫£i s·ªë nguy√™n.
    """
    try:
        if isinstance(number, float) and not number.is_integer():
            raise InvalidInputError(
                "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: S·ªë th·ª±c kh√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n"
            )
        number = int(number)
        if number <= 0:
            raise MathError("S·ªë ph·∫£i l·ªõn h∆°n 0 / Number must be greater than 0")
        return sum(i for i in range(1, number) if number % i == 0)
    except (ValueError, TypeError):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi√° tr·ªã kh√¥ng ph·∫£i s·ªë nguy√™n")


def tong_chu_so(number):
    """
    T√≠nh t·ªïng c√°c ch·ªØ s·ªë c·ªßa m·ªôt s·ªë nguy√™n.

    Tham s·ªë:
        - number (int ho·∫∑c float) - S·ªë c·∫ßn t√≠nh t·ªïng ch·ªØ s·ªë.
    Tr·∫£ v·ªÅ:
        - T·ªïng c√°c ch·ªØ s·ªë (int).

    N√©m l·ªói:
        - InvalidInputError n·∫øu ƒë·∫ßu v√†o kh√¥ng ph·∫£i s·ªë nguy√™n h·ª£p l·ªá.
    """
    try:
        if isinstance(number, float) and not number.is_integer():
            raise InvalidInputError(
                "ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: S·ªë th·ª±c c√≥ ph·∫ßn th·∫≠p ph√¢n kh√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n"
            )
        number = int(number)
        return sum(int(digit) for digit in str(abs(number)))
    except (ValueError, TypeError):
        raise InvalidInputError("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá: Gi√° tr·ªã kh√¥ng ph·∫£i s·ªë nguy√™n")


def kiem_tra_so_hoan_thien(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë ho√†n thi·ªán hay kh√¥ng.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number l√† s·ªë ho√†n thi·ªán, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - MathError n·∫øu number kh√¥ng l·ªõn h∆°n 1.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number < 1:
            raise MathError("S·ªë ph·∫£i l·ªõn h∆°n 0")
        return tong_uoc_so(number) == number
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_so_hoan_thien(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë ho√†n thi·ªán t·ª´ 0 ƒë·∫øn limit.

    Tham s·ªë:
        - limit (int) - Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ l·∫°i:
        - Danh s√°ch c√°c s·ªë ho√†n thi·ªán (list).

    N√©m l·ªói:
        - NotIntegerError n·∫øu kh√¥ng ph·∫£i s·ªë nguy√™n, InvalidInputError n·∫øu kh√¥ng l·ªõn h∆°n 1.
    """
    try:
        if not isinstance(limit, (int, float)) or not float(limit).is_integer():
            raise NotIntegerError("Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
        limit = int(limit)
        if limit < 1:
            raise InvalidInputError("Gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n 0")
        return [i for i in range(1, limit + 1) if kiem_tra_so_hoan_thien(i)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def kiem_tra_so_tu_man(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë t·ª± m√£n hay kh√¥ng.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number l√† s·ªë t·ª± m√£n, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - InvalidInputError n·∫øu number kh√¥ng ph·∫£i s·ªë nguy√™n >= 2.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number < 0:
            return False
        return sum(int(digit) ** 3 for digit in str(number)) == number
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_so_tu_man(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë t·ª± m√£n t·ª´ 0 ƒë·∫øn limit.

    Tham s·ªë:
        - limit (int) - Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ l·∫°i:
        - list - Danh s√°ch c√°c s·ªë t·ª± m√£n.

    N√©m l·ªói:
        - InvalidInputError n·∫øu limit kh√¥ng ph·∫£i s·ªë nguy√™n >= 2.
        - NotIntegerError n·∫øu limit kh√¥ng ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not isinstance(limit, (int, float)) or not float(limit).is_integer():
            raise NotIntegerError("Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
        limit = int(limit)
        if limit < 2:
            raise InvalidInputError("Gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 2")
        return [i for i in range(2, limit) if kiem_tra_so_tu_man(i)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def cap_so_hua_hon(number1, number2):
    """
    Ki·ªÉm tra xem hai s·ªë c√≥ ph·∫£i l√† c·∫∑p s·ªë h·ªØu h·∫£o hay kh√¥ng.

    Tham s·ªë:
        - number1 (int) - S·ªë th·ª© nh·∫•t.
        - number2 (int) - S·ªë th·ª© hai.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number1 v√† number2 l√† c·∫∑p s·ªë h·ªØu h·∫£o, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - MathError n·∫øu c√°c s·ªë √¢m.
        - InvalidInputError n·∫øu c√°c s·ªë kh√¥ng ph·∫£i s·ªë nguy√™n.
    """
    try:
        if not (
            isinstance(number1, (int, float)) and isinstance(number2, (int, float))
        ) or not (float(number1).is_integer() and float(number2).is_integer()):
            raise NotIntegerError("C·∫£ hai s·ªë ph·∫£i l√† s·ªë nguy√™n")
        number1, number2 = int(number1), int(number2)
        if number1 < 0 or number2 < 0:
            raise MathError("C√°c s·ªë ph·∫£i kh√¥ng √¢m")
        return (
            tong_uoc_so(number1) == number2 + 1 and tong_uoc_so(number2) == number1 + 1
        )
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def kiem_tra_so_hoan_hao(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë ho√†n h·∫£o hay kh√¥ng.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number l√† s·ªë ho√†n h·∫£o, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - MathError n·∫øu number < 1, InvalidInputError n·∫øu kh√¥ng ph·∫£i s·ªë nguy√™n.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number < 1:
            raise MathError("S·ªë ph·∫£i l·ªõn h∆°n 0")
        return sum(i for i in range(1, number) if number % i == 0) == number
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_so_hoan_hao(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë ho√†n h·∫£o t·ª´ 0 ƒë·∫øn limit.

    Tham s·ªë:
        - limit (int): Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c s·ªë ho√†n h·∫£o.

    N√©m l·ªói:
        - InvalidInputError n·∫øu limit kh√¥ng ph·∫£i s·ªë nguy√™n > 0.
    """
    try:
        if not isinstance(limit, (int, float)) or not float(limit).is_integer():
            raise NotIntegerError("Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
        limit = int(limit)
        if limit < 1:
            raise InvalidInputError("Gi·ªõi h·∫°n ph·∫£i l·ªõn h∆°n 0")
        return [i for i in range(1, limit) if kiem_tra_so_hoan_hao(i)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


# C√°c h√†m s·ªë ch√≠nh ph∆∞∆°ng, m·∫°nh m·∫Ω, th√¢n thi·∫øt
def kiem_tra_so_chinh_phuong(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë ch√≠nh ph∆∞∆°ng hay kh√¥ng.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number l√† s·ªë ch√≠nh ph∆∞∆°ng, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - InvalidInputError n·∫øu kh√¥ng ph·∫£i s·ªë nguy√™n.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number < 0:
            return False
        sqrt_number = int(math.sqrt(number))
        return sqrt_number * sqrt_number == number
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_so_chinh_phuong(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë ch√≠nh ph∆∞∆°ng t·ª´ 0 ƒë·∫øn limit.

    Tham s·ªë:
        - limit (int) - Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c s·ªë ch√≠nh ph∆∞∆°ng.

    N√©m l·ªói:
        - InvalidInputError n·∫øu limit kh√¥ng ph·∫£i s·ªë nguy√™n kh√¥ng √¢m.
    """
    try:
        if not isinstance(limit, (int, float)) or not float(limit).is_integer():
            raise NotIntegerError("Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
        limit = int(limit)
        if limit < 0:
            raise InvalidInputError("Gi·ªõi h·∫°n ph·∫£i kh√¥ng √¢m")
        return [i for i in range(limit) if kiem_tra_so_chinh_phuong(i)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def cap_so_than_thiet(number1, number2):
    """
    Ki·ªÉm tra xem hai s·ªë c√≥ ph·∫£i l√† c·∫∑p s·ªë th√¢n thi·∫øt hay kh√¥ng.

    Tham s·ªë:
        - number1 (int) - S·ªë th·ª© nh·∫•t.
        - number2 (int) - S·ªë th·ª© hai.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number1 v√† number2 l√† c·∫∑p s·ªë th√¢n thi·∫øt, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - MathError n·∫øu c√°c s·ªë kh√¥ng l·ªõn h∆°n 1.
        - InvalidInputError n·∫øu kh√¥ng ph·∫£i s·ªë nguy√™n.
    """
    try:
        if not (
            isinstance(number1, (int, float)) and isinstance(number2, (int, float))
        ) or not (float(number1).is_integer() and float(number2).is_integer()):
            raise NotIntegerError("C·∫£ hai s·ªë ph·∫£i l√† s·ªë nguy√™n")
        number1, number2 = int(number1), int(number2)
        if number1 <= 1 or number2 <= 1:
            raise MathError("C√°c s·ªë ph·∫£i l·ªõn h∆°n 1")
        return tong_uoc_so(number1) == number2 and tong_uoc_so(number2) == number1
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def kiem_tra_so_manh_me(number, variant=1):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë m·∫°nh m·∫Ω (t·ªïng ch·ªØ s·ªë l√† nguy√™n t·ªë) hay kh√¥ng.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ki·ªÉm tra.
        - variant (int) - 1 - T·ªïng ch·ªØ s·ªë l√† nguy√™n t·ªë; 2 - C√≥ th·ª´a s·ªë nguy√™n t·ªë b√¨nh ph∆∞∆°ng.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number l√† s·ªë m·∫°nh m·∫Ω, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - InvalidInputError n·∫øu kh√¥ng ph·∫£i s·ªë nguy√™n.
    """
    try:
        if not isinstance(number, int) or number < 0:
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m")
        number = int(number)
        if variant == 1:
            return kiem_tra_so_nguyen_to(tong_chu_so(number))
        elif variant == 2:
            prime_list = [i for i in range(2, number) if kiem_tra_so_nguyen_to(i)]
            for prime in prime_list:
                if number % prime == 0 and number % (prime**2) == 0:
                    return True
            return False
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


# C√°c h√†m v·ªÅ ∆∞·ªõc s·ªë v√† b·ªôi s·ªë
def tao_danh_sach_uoc_so(number, positive_only=True):
    """
    T·∫°o danh s√°ch c√°c ∆∞·ªõc s·ªë c·ªßa number.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn t·∫°o danh s√°ch ∆∞·ªõc s·ªë.
        - positive_only = True 'ho·∫∑c' False. M·∫∑c ƒë·ªãnh l√† True v√† c√°c ∆∞·ªõc s·∫Ω lu√¥n d∆∞∆°ng, c√≥ th·ªÉ thay ƒë·ªïi th√†nh False v√† c√°c ∆∞·ªõc √¢m s·∫Ω ƒë∆∞·ª£c xu·∫•t hi·ªán.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c ∆∞·ªõc s·ªë c·ªßa number.

    N√©m l·ªói:
        - MathError: N·∫øu number l√† 0.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number == 0:
            raise MathError("Kh√¥ng th·ªÉ t·∫°o danh s√°ch ∆∞·ªõc s·ªë cho 0")
        number = abs(number)
        divisors = [i for i in range(1, number + 1) if number % i == 0]
        if not positive_only:
            divisors += [-i for i in divisors]
        return sorted(divisors)
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_boi_so(number, positive_only=True):
    """
    T·∫°o danh s√°ch b·ªôi s·ªë c·ªßa number t·ª´ 0 ƒë·∫øn 10 l·∫ßn.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn t·∫°o danh s√°ch b·ªôi s·ªë.
        - positive_only = True 'ho·∫∑c' False. M·∫∑c ƒë·ªãnh l√† True v√† c√°c ∆∞·ªõc s·∫Ω lu√¥n d∆∞∆°ng, c√≥ th·ªÉ thay ƒë·ªïi th√†nh False v√† c√°c ∆∞·ªõc √¢m s·∫Ω ƒë∆∞·ª£c xu·∫•t hi·ªán.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch b·ªôi s·ªë c·ªßa number.

    N√©m l·ªói:
        - MathError: N·∫øu number l√† 0.
        - NotIntegerError: ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number == 0:
            raise MathError("Kh√¥ng th·ªÉ t·∫°o danh s√°ch b·ªôi s·ªë cho 0")
        if not positive_only == True:
            return sorted([-number * i for i in range(1, 11)]) + [
                number * i for i in range(11)
            ]
        return [number * i for i in range(11)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def uoc_chung(numbers):
    """
    T·∫°o danh s√°ch c√°c ∆∞·ªõc chung c·ªßa m·ªôt danh s√°ch c√°c s·ªë.

    Tham s·ªë:
        - numbers (list) - Danh s√°ch c√°c s·ªë.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c ∆∞·ªõc chung.

    N√©m l·ªói:
        - MathError: N·∫øu danh s√°ch kh√¥ng ƒë·ªß ph·∫ßn t·ª≠.
        - ListError: ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple.
    """

    def get_divisors(n):
        try:
            n = abs(int(n))
            return set(
                [i for i in range(1, n + 1) if n % i == 0]
                + [-i for i in range(1, n + 1) if n % i == 0]
            )
        except (ValueError, TypeError):
            raise TypeErrorCustom("Ph·∫ßn t·ª≠ trong danh s√°ch kh√¥ng h·ª£p l·ªá")

    try:
        numbers = list(set(numbers))
        for i in numbers:
            if i == 0:
                numbers.remove(i)
        if not isinstance(numbers, (list, tuple)):
            raise ListError("ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple")
        if len(numbers) < 2:
            raise MathError("Danh s√°ch ph·∫£i c√≥ √≠t nh·∫•t 2 ph·∫ßn t·ª≠")
        for num in numbers:
            if not isinstance(num, (int, float)) or not float(num).is_integer():
                raise NotIntegerError("T·∫•t c·∫£ ph·∫ßn t·ª≠ ph·∫£i l√† s·ªë nguy√™n")
        result = get_divisors(numbers[0])
        for num in numbers[1:]:
            result = result.intersection(get_divisors(num))
        return sorted(list(result))
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def uoc_chung_lon_nhat(numbers):
    """
    T√≠nh ∆∞·ªõc chung l·ªõn nh·∫•t c·ªßa m·ªôt danh s√°ch c√°c s·ªë.

    Tham s·ªë:
        - numbers (list) - Danh s√°ch c√°c s·ªë.

    Tr·∫£ l·∫°i:
        - int: ∆Ø·ªõc chung l·ªõn nh·∫•t c·ªßa danh s√°ch.

    N√©m l·ªói:
        - MathError: N·∫øu danh s√°ch kh√¥ng h·ª£p l·ªá.
        - ListError: N·∫øu ƒë·∫ßu v√†o kh√¥ng ph·∫£i l√† danh s√°ch ho·∫∑c tuple.
    """

    def get_UCLN(number1, number2):
        try:
            if not (
                isinstance(number1, (int, float)) and isinstance(number2, (int, float))
            ) or not (float(number1).is_integer() and float(number2).is_integer()):
                raise NotIntegerError("C·∫£ hai s·ªë ph·∫£i l√† s·ªë nguy√™n")
            number1, number2 = int(number1), int(number2)
            return math.gcd(number1, number2)
        except (ValueError, TypeError):
            raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")

    try:
        numbers = list(set(numbers))
        for i in numbers:
            if i == 0:
                numbers.remove(i)
        if not isinstance(numbers, (list, tuple)):
            raise ListError("ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple")
        if len(numbers) < 2:
            raise MathError("Danh s√°ch kh√¥ng h·ª£p l·ªá")
        for num in numbers:
            if not isinstance(num, (int, float)) or not float(num).is_integer():
                raise NotIntegerError("T·∫•t c·∫£ ph·∫ßn t·ª≠ ph·∫£i l√† s·ªë nguy√™n")
        result = int(numbers[0])
        for num in numbers[1:]:
            result = get_UCLN(result, int(num))
            if result == 1:
                break
        return result
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def boi_chung_nho_nhat(numbers):
    """
    T√≠nh b·ªôi chung nh·ªè nh·∫•t c·ªßa m·ªôt danh s√°ch c√°c s·ªë.

    Tham s·ªë:
        - numbers (list) - Danh s√°ch c√°c s·ªë.

    Tr·∫£ l·∫°i:
        - int: B·ªôi chung nh·ªè nh·∫•t c·ªßa danh s√°ch.

    N√©m l·ªói:
        - MathError: N·∫øu danh s√°ch kh√¥ng h·ª£p l·ªá.
        - ListError: ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple.
    """

    def get_BCNN(number1, number2):
        try:
            if not (
                isinstance(number1, (int, float)) and isinstance(number2, (int, float))
            ) or not (float(number1).is_integer() and float(number2).is_integer()):
                raise NotIntegerError("C·∫£ hai s·ªë ph·∫£i l√† s·ªë nguy√™n")
            number1, number2 = int(number1), int(number2)
            if number1 == 0 or number2 == 0:
                raise DivisionByZeroError("Kh√¥ng th·ªÉ t√≠nh LCM v·ªõi 0")
            return math.lcm(number1, number2)
        except (ValueError, TypeError):
            raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")

    try:
        if not isinstance(numbers, (list, tuple)):
            raise ListError("ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple")
        if len(numbers) < 2 or 0 in numbers:
            raise MathError("Danh s√°ch kh√¥ng h·ª£p l·ªá")
        for num in numbers:
            if not isinstance(num, (int, float)) or not float(num).is_integer():
                raise NotIntegerError("T·∫•t c·∫£ ph·∫ßn t·ª≠ ph·∫£i l√† s·ªë nguy√™n")
        result = int(numbers[0])
        for num in numbers[1:]:
            result = get_BCNN(result, int(num))
        return result
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


# C√°c h√†m s·ªë song t·ªë v√† s·ªë phong ph√∫
def kiem_tra_so_song_to(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë song t·ªë hay kh√¥ng.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number l√† s·ªë song t·ªë, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - NotIntegerError: ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        return kiem_tra_so_nguyen_to(number) and kiem_tra_so_nguyen_to(
            tong_chu_so(number)
        )
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_so_song_to(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë song t·ªë t·ª´ 0 ƒë·∫øn limit.

    Tham s·ªë:
        - limit (int) - Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c s·ªë song t·ªë.

    N√©m l·ªói:
        - NotIntegerError: ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n.
        - InvalidInputError: Gi·ªõi h·∫°n ph·∫£i kh√¥ng √¢m.
    """
    try:
        if not isinstance(limit, (int, float)) or not float(limit).is_integer():
            raise NotIntegerError("Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
        limit = int(limit)
        if limit < 0:
            raise InvalidInputError("Gi·ªõi h·∫°n ph·∫£i kh√¥ng √¢m")
        return [i for i in range(limit) if kiem_tra_so_song_to(i)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def kiem_tra_so_phong_phu(number):
    """
    Ki·ªÉm tra xem m·ªôt s·ªë c√≥ ph·∫£i l√† s·ªë phong ph√∫ hay kh√¥ng.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ki·ªÉm tra.

    Tr·∫£ l·∫°i:
        - bool: True n·∫øu number l√† s·ªë phong ph√∫, False n·∫øu kh√¥ng.

    N√©m l·ªói:
        - NotIntegerError: ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n.
        - InvalidInputError: Gi·ªõi h·∫°n ph·∫£i kh√¥ng √¢m.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number <= 0:
            return False
        return sum(i for i in range(1, number) if number % i == 0) > number
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_so_phong_phu(limit):
    """
    T·∫°o danh s√°ch c√°c s·ªë phong ph√∫ t·ª´ 0 ƒë·∫øn limit.

    Tham s·ªë:
        - limit (int) - Gi·ªõi h·∫°n tr√™n c·ªßa danh s√°ch.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c s·ªë phong ph√∫.

    N√©m l·ªói:
        - NotIntegerError: ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not isinstance(limit, (int, float)) or not float(limit).is_integer():
            raise NotIntegerError("Gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
        limit = int(limit)
        if limit < 0:
            raise InvalidInputError("Gi·ªõi h·∫°n ph·∫£i kh√¥ng √¢m")
        return [i for i in range(limit) if kiem_tra_so_phong_phu(i)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def thua_so_nguyen_to(number):
    """
    Ph√¢n t√≠ch m·ªôt s·ªë th√†nh danh s√°ch c√°c th·ª´a s·ªë nguy√™n t·ªë.

    Tham s·ªë:
        - number (int) - S·ªë c·∫ßn ph√¢n t√≠ch.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c th·ª´a s·ªë nguy√™n t·ªë.

    N√©m l·ªói:
        - MathError: N·∫øu number kh√¥ng l·ªõn h∆°n 1.
        - NotIntegerError: ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not isinstance(number, (int, float)) or not float(number).is_integer():
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        number = int(number)
        if number <= 1:
            raise MathError("S·ªë ph·∫£i l·ªõn h∆°n 1")
        factors = []
        divisor = 2
        while number > 1:
            while number % divisor == 0:
                factors.append(divisor)
                number //= divisor
            divisor += 1
        return factors
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def uoc_chung_nguyen_to_hai_so(number1, number2):
    """
    T√¨m ∆∞·ªõc chung nguy√™n t·ªë l·ªõn nh·∫•t c·ªßa hai s·ªë.

    Tham s·ªë:
        - number1 (int) - S·ªë th·ª© nh·∫•t.
        - number2 (int) - S·ªë th·ª© hai.

    Tr·∫£ l·∫°i:
        - int: ∆Ø·ªõc chung nguy√™n t·ªë l·ªõn nh·∫•t c·ªßa number1 v√† number2.

    N√©m l·ªói:
        - MathError: N·∫øu c√°c s·ªë kh√¥ng l·ªõn h∆°n 1 ho·∫∑c kh√¥ng c√≥ ∆∞·ªõc chung nguy√™n t·ªë.
        - NotIntegerError: C·∫£ hai s·ªë ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not (
            isinstance(number1, (int, float)) and isinstance(number2, (int, float))
        ) or not (float(number1).is_integer() and float(number2).is_integer()):
            raise NotIntegerError("C·∫£ hai s·ªë ph·∫£i l√† s·ªë nguy√™n")
        number1, number2 = int(number1), int(number2)
        if number1 <= 1 or number2 <= 1:
            raise MathError("C√°c s·ªë ph·∫£i l·ªõn h∆°n 1")
        factors1 = set(thua_so_nguyen_to(number1))
        factors2 = set(thua_so_nguyen_to(number2))
        common_factors = factors1.intersection(factors2)
        if not common_factors:
            raise MathError("Kh√¥ng c√≥ ∆∞·ªõc chung nguy√™n t·ªë")
        return max(common_factors)
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


# H√†m gi·∫£i ph∆∞∆°ng tr√¨nh
def giai_phuong_trinh(degree, coefficients):
    """
    Gi·∫£i ph∆∞∆°ng tr√¨nh t·ª´ b·∫≠c 1 ƒë·∫øn b·∫≠c 10 theo h·ªá s·ªë.

    Tham s·ªë:
        - degree (int) - B·∫≠c c·ªßa ph∆∞∆°ng tr√¨nh.
        - coefficients (list) - Danh s√°ch c√°c h·ªá s·ªë c·ªßa ph∆∞∆°ng tr√¨nh.

    Tr·∫£ l·∫°i:
        - str: K·∫øt qu·∫£ nghi·ªám c·ªßa ph∆∞∆°ng tr√¨nh.

    N√©m l·ªói:
        - ImportError: N·∫øu numpy kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t.
        - InvalidInputError: N·∫øu b·∫≠c ho·∫∑c h·ªá s·ªë kh√¥ng h·ª£p l·ªá.
    """
    try:
        if numpy is None:
            raise ImportError(
                "H√†m n√†y y√™u c·∫ßu c√†i ƒë·∫∑t numpy. H√£y ch·∫°y: pip install numpy"
            )
        if not isinstance(degree, (int, float)) or not float(degree).is_integer():
            raise NotIntegerError("B·∫≠c ph·∫£i l√† s·ªë nguy√™n")
        degree = int(degree)
        if degree < 1 or degree > 10:
            raise InvalidInputError("B·∫≠c c·ªßa ph∆∞∆°ng tr√¨nh ph·∫£i t·ª´ 1 ƒë·∫øn 10")
        if not isinstance(coefficients, (list, tuple)):
            raise ListError("H·ªá s·ªë ph·∫£i l√† danh s√°ch ho·∫∑c tuple")
        if len(coefficients) != degree + 1:
            raise InvalidInputError(
                f"Ph∆∞∆°ng tr√¨nh b·∫≠c {degree} ph·∫£i c√≥ {degree + 1} h·ªá s·ªë"
            )
        for coef in coefficients:
            if not isinstance(coef, (int, float)):
                raise TypeErrorCustom("H·ªá s·ªë ph·∫£i l√† s·ªë")
        roots = numpy.roots(coefficients)
        real_roots = [r for r in roots if numpy.isreal(r)]
        complex_roots = [r for r in roots if not numpy.isreal(r)]
        result = "Nghi·ªám c·ªßa ph∆∞∆°ng tr√¨nh:\n"
        if real_roots:
            result += "\nNghi·ªám th·ª±c:\n" + "\n".join(
                f"x{i+1} = {r.real}" for i, r in enumerate(real_roots)
            )
        if complex_roots:
            result += "\nNghi·ªám ph·ª©c:\n" + "\n".join(
                f"x{i+1} = {r}" for i, r in enumerate(complex_roots)
            )
        return (
            result.strip()
            if real_roots or complex_roots
            else "Ph∆∞∆°ng tr√¨nh kh√¥ng c√≥ nghi·ªám th·ª±c ho·∫∑c ph·ª©c"
        )
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


# C√°c h√†m x·ª≠ l√Ω danh s√°ch v√† chu·ªói
def danh_sach_khong_trung_lap(items):
    """
    Lo·∫°i b·ªè ph·∫ßn t·ª≠ tr√πng l·∫∑p trong danh s√°ch.

    Tham s·ªë:
        - items (list) - Danh s√°ch c·∫ßn x·ª≠ l√Ω.

    Tr·∫£ l·∫°i:
        - list - Danh s√°ch kh√¥ng c√≥ ph·∫ßn t·ª≠ tr√πng l·∫∑p.

    N√©m l·ªói:
        - ListError: ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple.
    """
    try:
        if not isinstance(items, (list, tuple)):
            raise ListError("ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple")
        return sorted(list(set(items)), reverse=True)
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def trich_xuat_chu_so_tu_chuoi(text):
    """
    Tr√≠ch xu·∫•t chu·ªói ch·ªØ s·ªë t·ª´ chu·ªói. V√≠ d·ª•: "abc123" = [1,2,3].

    Tham s·ªë:
        - text (str) - Chu·ªói ƒë·∫ßu v√†o.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c ch·ªØ s·ªë.

    N√©m l·ªói:
        - InvalidInputError: n·∫øu chu·ªói r·ªóng.
    """
    try:
        if not isinstance(text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        if not text:
            raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
        return [int(digit) for digit in re.findall(r"\d", text)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def trich_xuat_so_tu_chuoi(text):
    """
    Tr√≠ch xu·∫•t chu·ªói s·ªë t·ª´ chu·ªói. V√≠ d·ª•: "abc123" = [123].

    Tham s·ªë:
        - text (str) - Chu·ªói ƒë·∫ßu v√†o.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c s·ªë.

    N√©m l·ªói:
        - InvalidInputError: n·∫øu chu·ªói r·ªóng.
    """
    try:
        if not isinstance(text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        if not text:
            raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
        return [int(number) for number in re.findall(r"\d+", text)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def trich_xuat_ki_tu(text):
    """
    Tr√≠ch xu·∫•t c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë t·ª´ chu·ªói.

    Tham s·ªë:
        - text (str) - Chu·ªói ƒë·∫ßu v√†o.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë.

    N√©m l·ªói:
        - TypeErrorCustom: ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói.
        - InvalidInputError: Chu·ªói kh√¥ng th·ªÉ r·ªóng.
    """
    try:
        if not isinstance(text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        if not text:
            raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
        return re.findall(r"\D", text)
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def xau_duoc_nen(text, type):
    """
    X√¢u ƒë∆∞·ª£c n√©n th√†nh 2 lo·∫°i.

    Tham s·ªë:
        - text (str) - Chu·ªói ƒë·∫ßu v√†o.
        - type = 1 ho·∫∑c 2. N·∫øu 1 th√¨ "google" ‚Üí "google", n·∫øu 2 th√¨ "google" ‚Üí "google".

    Tr·∫£ l·∫°i:
        - str: Chu·ªói ƒë√£ n√©n.

    N√©m l·ªói:
        - InvalidInputError: Lo·∫°i n√©n ch·ªâ c√≥ 1 ho·∫∑c 2.
    """

    def loai_1(text):
        try:
            if not isinstance(text, str):
                raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
            if not text:
                raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
            sorted_chars = sorted([char for char in text], reverse=True)
            result = ""
            count = 1
            for i in range(1, len(sorted_chars)):
                if sorted_chars[i] == sorted_chars[i - 1]:
                    count += 1
                else:
                    result += (
                        str(count) + sorted_chars[i - 1]
                        if count > 1
                        else sorted_chars[i - 1]
                    )
                    count = 1
            result += str(count) + sorted_chars[-1] if count > 1 else sorted_chars[-1]
            return result
        except (ValueError, TypeError):
            raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")

    def loai_2(text):
        try:
            if not isinstance(text, str):
                raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
            if not text:
                raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
            result = ""
            count = 1
            for i in range(1, len(text)):
                if text[i] == text[i - 1]:
                    count += 1
                else:
                    result += str(count) + text[i - 1] if count > 1 else text[i - 1]
                    count = 1
            result += str(count) + text[-1] if count > 1 else text[-1]
            return result
        except (ValueError, TypeError):
            raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")

    if type == 1:
        return loai_1(text)
    elif type == 2:
        return loai_2(text)
    else:
        raise InvalidInputError("Lo·∫°i n√©n ch·ªâ c√≥ 1 ho·∫∑c 2")


def xau_duoc_nen_khong_ghi_so(input_text):
    """
    N√©n x√¢u b·ªè s·ªë (v√≠ d·ª• "hhhooccssiiinnhh" ‚Üí "hocsinh").

    Tham s·ªë:
        - input_text (str): Chu·ªói ƒë·∫ßu v√†o.

    Tr·∫£ l·∫°i:
        - str: Chu·ªói ƒë√£ n√©n.

    N√©m l·ªói:
        - InvalidInputError: Chu·ªói kh√¥ng th·ªÉ r·ªóng.
    """
    try:
        if not isinstance(input_text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        if not input_text:
            raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
        result = input_text[0]
        for char in input_text[1:]:
            if char != result[-1]:
                result += char
        return result
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def xau_duoc_giai_nen(text):
    """
    Gi·∫£i n√©n x√¢u (v√≠ d·ª• g2ogle" ‚Üí "google").

    Tham s·ªë:
        - text (str) - Chu·ªói ƒë·∫ßu v√†o.

    Tr·∫£ l·∫°i:
        - str: Chu·ªói ƒë√£ gi·∫£i n√©n.

    N√©m l·ªói:
        - InvalidInputError: N·∫øu chu·ªói r·ªóng.
    """
    try:
        if not isinstance(text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        if not text:
            raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
        result = ""
        count = ""
        for char in text:
            if char.isdigit():
                count += char
            else:
                result += char if count == "" else int(count) * char
                count = ""
        return result
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c s·ªë kh√¥ng h·ª£p l·ªá trong chu·ªói")


def xau_ki_tu_khong_trung_lap(text):
    """
    T·∫°o x√¢u k√Ω t·ª± kh√¥ng tr√πng l·∫∑p (v√≠ d·ª• "google" ‚Üí gole").

    Tham s·ªë:
        - text (str) - Chu·ªói ƒë·∫ßu v√†o.

    Tr·∫£ l·∫°i:
        - str: Chu·ªói kh√¥ng c√≥ k√Ω t·ª± tr√πng l·∫∑p.

    N√©m l·ªói:
        - InvalidInputError: N·∫øu chu·ªói r·ªóng.
    """
    try:
        if not isinstance(text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        if not text:
            raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
        text = text.lower()
        unique_chars = ""
        for char in text:
            if char not in unique_chars:
                unique_chars += char
        return unique_chars
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


# M·∫≠t m√£ Caesar
def chuyen_hoa_caesar(text, shift):
    """
    Chuy·ªÉn chu·ªói th√†nh d√£y s·ªë m·∫≠t m√£ Caesar.

    Tham s·ªë:
        - text (str) - Chu·ªói ƒë·∫ßu v√†o.
        - shift (int) - S·ªë b∆∞·ªõc d·ªãch chuy·ªÉn.

    Tr·∫£ l·∫°i:
        - list: D√£y s·ªë m·∫≠t m√£ Caesar.

    N√©m l·ªói:
        - InvalidInputError: N·∫øu chu·ªói r·ªóng, chu·ªói ph·∫£i ch·ªâ ch·ª©a ch·ªØ c√°i.
        - NotIntegerError: S·ªë b∆∞·ªõc d·ªãch chuy·ªÉn ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not isinstance(text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        if not isinstance(shift, (int, float)) or not float(shift).is_integer():
            raise NotIntegerError("S·ªë b∆∞·ªõc d·ªãch chuy·ªÉn ph·∫£i l√† s·ªë nguy√™n")
        shift = int(shift)
        if not text:
            raise InvalidInputError("Chu·ªói kh√¥ng th·ªÉ r·ªóng")
        text = "".join([char for char in text.upper() if char != " "]).strip()
        if not text.isalpha():
            raise InvalidInputError("Chu·ªói ph·∫£i ch·ªâ ch·ª©a ch·ªØ c√°i")
        char_map = {chr(65 + i): i for i in range(26)}
        shifted_map = [(i + shift) % 26 for i in range(26)]
        return [shifted_map[char_map[char]] for char in text]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def ma_hoa_caesar(numbers, shift):
    """
    M√£ h√≥a d√£y s·ªë Caesar th√†nh x√¢u.

    Tham s·ªë:
        - numbers (list) - D√£y s·ªë ƒë·∫ßu v√†o.
        - shift (int) - S·ªë b∆∞·ªõc d·ªãch chuy·ªÉn.

    Tr·∫£ l·∫°i:
        - str: Chu·ªói ƒë√£ m√£ h√≥a.

    N√©m l·ªói:
        - InvalidInputError: N·∫øu chu·ªói r·ªóng, c√°c s·ªë ph·∫£i l√† s·ªë nguy√™n t·ª´ 0 ƒë·∫øn 25.
        - ListError: ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple.
        - NotIntegerError: S·ªë b∆∞·ªõc d·ªãch chuy·ªÉn ph·∫£i l√† s·ªë nguy√™n.
    """
    try:
        if not isinstance(numbers, (list, tuple)):
            raise ListError("ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple")
        if not isinstance(shift, (int, float)) or not float(shift).is_integer():
            raise NotIntegerError("S·ªë b∆∞·ªõc d·ªãch chuy·ªÉn ph·∫£i l√† s·ªë nguy√™n")
        shift = int(shift)
        if not numbers:
            raise InvalidInputError("Danh s√°ch kh√¥ng th·ªÉ r·ªóng")
        for num in numbers:
            if (
                not isinstance(num, (int, float))
                or not float(num).is_integer()
                or int(num) < 0
                or int(num) > 25
            ):
                raise InvalidInputError("C√°c s·ªë ph·∫£i l√† s·ªë nguy√™n t·ª´ 0 ƒë·∫øn 25")
        char_map = {i: chr(65 + i) for i in range(26)}
        shifted_map = [(i + shift) % 26 for i in range(26)]
        reverse_map = {shifted_map[i]: i for i in range(26)}
        decoded = [reverse_map[int(num)] for num in numbers]
        return "".join([char_map[i] for i in decoded])
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


# Teen Code Yahoo
def teen_code_yahoo(input_text):
    """
    Chuy·ªÉn x√¢u th√†nh Teen Code Yahoo.

    Tham s·ªë:
        - input_text (str) - Chu·ªói ƒë·∫ßu v√†o.

    Tr·∫£ l·∫°i:
        - str: Chu·ªói Teen Code Yahoo.
    """
    teen_code_ya = {
        " ": " ",
        "a": "4",
        "√°": "4'",
        "√†": "4`",
        "·∫£": "4?",
        "√£": "4~",
        "·∫°": "4.",
        "ƒÉ": "4",
        "·∫Ø": "4'",
        "·∫±": "4`",
        "·∫≥": "4?",
        "·∫µ": "4~",
        "·∫∑": "4.",
        "√¢": "4",
        "·∫•": "4'",
        "·∫ß": "4`",
        "·∫©": "4?",
        "·∫´": "4~",
        "·∫≠": "4.",
        "e": "3",
        "√©": "3'",
        "√®": "3`",
        "·∫ª": "3?",
        "·∫Ω": "3~",
        "·∫π": "3.",
        "√™": "3^",
        "·∫ø": "3^'",
        "·ªÅ": "3^`",
        "·ªÉ": "3^?",
        "·ªÖ": "3^~",
        "·ªá": "3^.",
        "i": "!",
        "√≠": "!'",
        "√¨": "!`",
        "·ªâ": "!?",
        "ƒ©": "!~",
        "·ªã": "!.",
        "o": "0",
        "√≥": "0'",
        "√≤": "0`",
        "·ªè": "0?",
        "√µ": "0~",
        "·ªç": "0.",
        "√¥": "0^",
        "·ªë": "0^'",
        "·ªì": "0^`",
        "·ªï": "0^?",
        "·ªó": "0^~",
        "·ªô": "0^.",
        "∆°": "0",
        "·ªõ": "0'",
        "·ªù": "0`",
        "·ªü": "0?",
        "·ª°": "0~",
        "·ª£": "0.'",
        "u": "‚äî",
        "√∫": "‚äî'",
        "√π": "‚äî`",
        "·ªß": "‚äî?",
        "≈©": "‚äî~",
        "·ª•": "‚äî.",
        "∆∞": "‚äî",
        "·ª©": "‚äî'",
        "·ª´": "‚äî`",
        "·ª≠": "‚äî?",
        "·ªØ": "‚äî~",
        "·ª±": "‚äî.",
        "y": "¬•",
        "√Ω": "¬•'",
        "·ª≥": "¬•`",
        "·ª∑": "¬•?",
        "·ªπ": "¬•~",
        "·ªµ": "¬•.",
        "b": "|3",
        "c": "¬©",
        "d": "|)",
        "ƒë": "+)",
        "g": "9",
        "h": "|-|",
        "k": "|<",
        "l": "1",
        "m": "|V|",
        "n": "œÄ",
        "p": "|‚Åæ",
        "q": "‚ÅΩ|",
        "r": "Œì",
        "s": "‚à´",
        "t": "œÑ",
        "v": "‚àö",
        "x": "‚®â",
    }

    try:
        if not isinstance(input_text, str):
            raise TypeErrorCustom("ƒê·∫ßu v√†o ph·∫£i l√† chu·ªói")
        input_text = (str(input_text)).lower()
        change = []
        result = ""
        for i in range(len(list(input_text))):
            if input_text[i] in teen_code_ya:
                change.append(str(teen_code_ya[input_text[i]]))
            else:
                change.append(input_text[i])
        for i in change:
            result += i
        return result
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


# C√°c h√†m m√¥ ph·ªèng ch·ªâ v·ªõi string
def mp_tai_xuong(steps):
    """
    M√¥ ph·ªèng qu√° tr√¨nh t·∫£i xu·ªëng.

    Tham s·ªë:
        steps (int): S·ªë b∆∞·ªõc t·∫£i xu·ªëng.

    N√©m l·ªói:
        OutOfRangeError: N·∫øu steps kh√¥ng n·∫±m trong ph·∫°m vi h·ª£p l·ªá.
    """
    try:
        if not isinstance(steps, (int, float)) or not float(steps).is_integer():
            raise NotIntegerError("S·ªë b∆∞·ªõc ph·∫£i l√† s·ªë nguy√™n")
        steps = int(steps)
        if steps < 0 or steps > 88 or steps <= 1:
            raise OutOfRangeError("S·ªë b∆∞·ªõc ph·∫£i t·ª´ 2 ƒë·∫øn 88")
        for i in range(steps):
            sys.stdout.write(
                "Dang tai xuong [{}{}] {}%\r".format(
                    "‚ñ†" * i, " " * (steps - 1 - i), (i + 1) * 100 // steps
                )
            )
            sys.stdout.flush()
            time.sleep(0.1)
        print("\nTai xuong hoan tat!")
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def mp_tinh_toan(steps):
    """
    M√¥ ph·ªèng qu√° tr√¨nh t√≠nh to√°n.

    Tham s·ªë:
        steps (int): S·ªë b∆∞·ªõc t√≠nh to√°n.

    N√©m l·ªói:
        OutOfRangeError: N·∫øu steps kh√¥ng n·∫±m trong ph·∫°m vi h·ª£p l·ªá.
    """
    try:
        if not isinstance(steps, (int, float)) or not float(steps).is_integer():
            raise NotIntegerError("S·ªë b∆∞·ªõc ph·∫£i l√† s·ªë nguy√™n")
        steps = int(steps)
        if steps < 0 or steps >= 88:
            raise OutOfRangeError("S·ªë b∆∞·ªõc ph·∫£i t·ª´ 0 ƒë·∫øn 87")
        for i in range(steps):
            sys.stdout.write(
                "    AD: Dang tinh toan [{}{}] {}%\r".format(
                    "‚ñ†" * i, " " * (steps - 1 - i), (i + 1) * 100 // steps
                )
            )
            sys.stdout.flush()
            time.sleep(0.2)
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def mp_loading(count):
    """
    M√¥ ph·ªèng qu√° tr√¨nh loading.

    Tham s·ªë:
        count (int): S·ªë l·∫ßn l·∫∑p.
    """
    try:
        if not isinstance(count, (int, float)) or not float(count).is_integer():
            raise NotIntegerError("S·ªë l·∫ßn l·∫∑p ph·∫£i l√† s·ªë nguy√™n")
        count = int(count)
        if count < 0:
            raise InvalidInputError("S·ªë l·∫ßn l·∫∑p ph·∫£i kh√¥ng √¢m")
        sys.stdout.write("LOADING")
        sys.stdout.flush()
        time.sleep(0.5)
        for _ in range(count):
            for _ in range(3):
                sys.stdout.write(".")
                sys.stdout.flush()
                time.sleep(0.4)
            sys.stdout.write("\b\b\b   \b\b\b")
            sys.stdout.flush()
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def mp_christmas_tree(type):
    """
    M√¥ ph·ªèng c√¢y th√¥ng gi√°ng sinh.

    Tham s·ªë:
        - type (int) = 1 ho·∫∑c 2. N·∫øu 1 l√† c√¢y th√¥ng cho terminal VSCode, 2 l√† cho vƒÉn b·∫£n text.

    Tr·∫£ l·∫°i:
        None: Y√™u c·∫ßu nh·∫≠p chi·ªÅu cao c√¢y th√¥ng.
    """

    def loai_1():
        try:
            height = input("- Nh·∫≠p chi·ªÅu cao c√¢y th√¥ng: ")
            if not height.isdigit():
                raise NotIntegerError("Chi·ªÅu cao ph·∫£i l√† s·ªë nguy√™n")
            height = int(height)
            if height <= 0:
                raise InvalidInputError("Chi·ªÅu cao ph·∫£i l·ªõn h∆°n 0")
            tree = []
            for i in range(height):
                tree.append(" " * (height - i - 1) + "* " * (i + 1))
            for i in range(height // 3):
                tree.append(" " * (height - 1) + "H")
            for line in tree:
                print(line)
        except (ValueError, TypeError):
            raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")

    def loai_2():
        try:
            height = input("- Nh·∫≠p chi·ªÅu cao c√¢y th√¥ng: ")
            if not height.isdigit():
                raise NotIntegerError("Chi·ªÅu cao ph·∫£i l√† s·ªë nguy√™n")
            height = int(height)
            if height <= 0:
                raise InvalidInputError("Chi·ªÅu cao ph·∫£i l·ªõn h∆°n 0")
            tree = []
            for i in range(height):
                tree.append("  " * (height - i - 1) + " * " * (i + 1))
            for i in range(height // 3):
                tree.append("  " * (height - 1) + "H")
            for line in tree:
                print(line)
        except (ValueError, TypeError):
            raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")

    if type == 1:
        return loai_1()
    elif type == 2:
        return loai_2()
    else:
        raise InvalidInputError("Lo·∫°i n√©n ch·ªâ c√≥ 1 ho·∫∑c 2")


def chuong_trinh_matrix():
    """
    Gi·ªõi thi·ªáu:
        - Ch∆∞∆°ng tr√¨nh n√†y t·∫°o v√† thao t√°c v·ªõi ma tr·∫≠n ng·∫´u nhi√™n d·ª±a tr√™n ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng.
        - C√°c ch·ª©c nƒÉng bao g·ªìm:
        - T·∫°o ma tr·∫≠n v·ªõi k√≠ch th∆∞·ªõc v√† gi√° tr·ªã t·ªëi ƒëa do ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh.
        - In ma tr·∫≠n.
        - T√≠nh to√°n v√† hi·ªÉn th·ªã gi√° tr·ªã l·ªõn nh·∫•t, nh·ªè nh·∫•t, t·ªïng, v√† trung b√¨nh c·ªßa c√°c ph·∫ßn t·ª≠ trong ma tr·∫≠n.
        - Tr√≠ch xu·∫•t v√† hi·ªÉn th·ªã h√†ng ho·∫∑c c·ªôt c·ª• th·ªÉ.
        - T√¨m ki·∫øm m·ªôt s·ªë trong ma tr·∫≠n v√† hi·ªÉn th·ªã c√°c v·ªã tr√≠ c·ªßa n√≥.
        - L·ªçc ma tr·∫≠n ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã c√°c ph·∫ßn t·ª≠ b·∫±ng v·ªõi s·ªë ƒë∆∞·ª£c t√¨m ki·∫øm.

    N√©m l·ªói:
        - ValueError: N·∫øu ng∆∞·ªùi d√πng nh·∫≠p c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá, ch·∫≥ng h·∫°n nh∆∞ s·ªë h√†ng ho·∫∑c s·ªë c·ªôt kh√¥ng ph·∫£i l√† s·ªë nguy√™n, kh√¥ng d∆∞∆°ng, l·ªõn h∆°n 20, ho·∫∑c n·∫øu gi√° tr·ªã t·ªëi ƒëa l·ªõn h∆°n 100.
        - IndexError: N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu tr√≠ch xu·∫•t h√†ng ho·∫∑c c·ªôt kh√¥ng t·ªìn t·∫°i trong ma tr·∫≠n.
    """

    def tao_matrix(m, n, max_value=100):
        if not (isinstance(m, int) and isinstance(n, int)):
            raise ValueError("S·ªë h√†ng v√† s·ªë c·ªôt ph·∫£i l√† s·ªë nguy√™n.")
        if m <= 0 or n <= 0:
            raise ValueError("S·ªë h√†ng v√† s·ªë c·ªôt ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.")
        if m > 20 or n > 20:
            raise ValueError("S·ªë h√†ng v√† s·ªë c·ªôt kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 20.")
        return [
            [random.randrange(-9, max_value + 1) for _ in range(n)] for _ in range(m)
        ]

    def in_ra_matrix(matrix, title="Ma tran", align=">4"):
        print(f"{title}:\n")
        if not matrix or not matrix[0]:
            print("Ma tran rong.")
            return
        str_matrix = [[str(elem) for elem in row] for row in matrix]
        max_len = max(len(elem) for row in str_matrix for elem in row)
        align = f">{max_len}"
        for row in str_matrix:
            print(" ".join(f"{elem:{align}}" for elem in row))
        print()

    def thong_ke_matrix(matrix):
        flat_matrix = [elem for row in matrix for elem in row]
        if not flat_matrix:
            raise ValueError("Ma tr·∫≠n r·ªóng.")
        return {
            "max": max(flat_matrix),
            "min": min(flat_matrix),
            "sum": sum(flat_matrix),
            "avg": sum(flat_matrix) / len(flat_matrix),
        }

    def lay_hang(matrix, row_index):
        if not 0 <= row_index < len(matrix):
            raise IndexError(
                f"H√†ng {row_index + 1} kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ 1 ƒë·∫øn {len(matrix)})."
            )
        return matrix[row_index]

    def lay_cot(matrix, col_index):
        if not 0 <= col_index < len(matrix[0]):
            raise IndexError(
                f"C·ªôt {col_index + 1} kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ 1 ƒë·∫øn {len(matrix[0])})."
            )
        return [row[col_index] for row in matrix]

    def tim_so(matrix, num):
        positions = [
            (i, j)
            for i in range(len(matrix))
            for j in range(len(matrix[0]))
            if matrix[i][j] == num
        ]
        return positions if positions else None

    def loc_matrix(matrix, num, replace_with="‚Äì‚Äì"):
        return [
            [elem if elem == num else replace_with for elem in row] for row in matrix
        ]

    try:
        if roman is None:
            raise ImportError(
                "H√†m n√†y y√™u c·∫ßu c√†i ƒë·∫∑t roman. H√£y ch·∫°y: pip install roman"
            )
        print("=== Chuong trinh Ma tran ===")
        m = int(input("- Nhap so hang: "))
        n = int(input("- Nhap so cot: "))
        max_val = int(
            input("- Nhap gia tri toi da cho phan tu (mac dinh 100): ") or 100
        )

        if max_val > 100:
            raise ValueError("Gi√° tr·ªã t·ªëi ƒëa kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 100.")

        matrix = tao_matrix(m, n, max_val)

        for row in matrix:
            for elem in row:
                if elem > 100:
                    raise ValueError("C√≥ s·ªë l·ªõn h∆°n 100 trong ma tr·∫≠n.")

        in_ra_matrix(matrix, "- Ma tran goc")

        stats = thong_ke_matrix(matrix)
        print(f">>> Gia tri lon nhat: {stats['max']}")
        print(f">>> Gia tri nho nhat: {stats['min']}")
        print(f">>> Tong cac phan tu: {stats['sum']}")
        print(f">>> Trung binh: {stats['avg']:.2f}\n")

        hang_bat_ky = int(input(f"- Nhap hang can lay (1 den {m}): ")) - 1
        row = lay_hang(matrix, hang_bat_ky)
        print(f">>> Hang {hang_bat_ky + 1}: {row}\n")

        cot_bat_ky = int(input(f"- Nhap cot can lay (1 den {n}): ")) - 1
        column = lay_cot(matrix, cot_bat_ky)
        print(f">>> Cot {cot_bat_ky + 1}: {column}\n")

        so_n = int(input("- Nhap so can tim: "))
        positions = tim_so(matrix, so_n)
        if positions:
            print(f"- So {so_n} xuat hien {len(positions)} lan trong ma tran.")
            in_ra_matrix(loc_matrix(matrix, so_n), "- Ma tran sau khi loc")
            print(">>> Vi tri cua so:")
            for idx, (i, j) in enumerate(positions, 1):
                print(f"[{roman.toRoman(idx)} - {idx}] Hang: {i + 1}, Cot: {j + 1}")
        else:
            print(f"- So {so_n} khong co trong ma tran.")

    except ValueError as e:
        print(f"Loi: {e}")
    except IndexError as e:
        print(f"Loi: {e}")
    except Exception as e:
        print(f"Loi khong xac dinh: {e}")
    finally:
        print("=== Ket thuc chuong trinh ===")


# H√†m h·ªó tr·ª£ t√≠nh to√°n ƒë·∫∑c bi·ªát
def tinh_toan_tien_dien(old_reading, new_reading):
    """
    T√≠nh to√°n ti·ªÅn ƒëi·ªán.

    Tham s·ªë:
        - old_reading (str) - Ch·ªâ s·ªë c≈©.
        - new_reading (str) - Ch·ªâ s·ªë m·ªõi.

    Tr·∫£ l·∫°i:
        - str: K·∫øt qu·∫£ t√≠nh to√°n.

    N√©m l·ªói:
        - MathError: N·∫øu ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá.
    """
    try:
        old_val = float(old_reading)
        new_val = float(new_reading)
        if new_val > old_val and old_val > 0 and new_val > 0:
            kwh = new_val - old_val
            if 0 <= kwh < 51:
                total = kwh * 1678
            elif 50 < kwh < 101:
                total = ((kwh - 50) * 1734) + 50 * 1678
            elif 100 < kwh < 201:
                total = ((kwh - 100) * 2014) + 50 * 1734 + 50 * 1678
            elif 200 < kwh < 301:
                total = ((kwh - 200) * 2536) + 100 * 2014 + 50 * 1734 + 50 * 1678
            elif 300 < kwh < 401:
                total = (
                    ((kwh - 300) * 2834)
                    + 100 * 2536
                    + 100 * 2014
                    + 50 * 1734
                    + 50 * 1678
                )
            else:
                total = (
                    ((kwh - 400) * 2927)
                    + 100 * 2834
                    + 100 * 2536
                    + 100 * 2014
                    + 50 * 1734
                    + 50 * 1678
                )
            return f"- So Kwh dien tieu thu trong thang: {kwh} Kwh\n- So tien dien can tra trong thang: {total} VND"
        raise MathError("Chi so khong hop le")
    except (ValueError, TypeError):
        raise TypeErrorCustom("Ch·ªâ s·ªë ph·∫£i l√† s·ªë h·ª£p l·ªá")


def tong_chu_so_lon_nhat_bang_n(digit_count, target_sum):
    """
    T√¨m s·ªë l·ªõn nh·∫•t c√≥ digit_count ch·ªØ s·ªë v√† t·ªïng c√°c ch·ªØ s·ªë b·∫±ng target_sum.

    Tham s·ªë:
        - digit_count (int) - S·ªë ch·ªØ s·ªë.
        - target_sum (int) - T·ªïng c√°c ch·ªØ s·ªë.

    Tr·∫£ l·∫°i:
        - str: S·ªë l·ªõn nh·∫•t th·ªèa m√£n ƒëi·ªÅu ki·ªán.

    N√©m l·ªói:
        - MathError: N·∫øu kh√¥ng th·ªÉ t·∫°o s·ªë th·ªèa m√£n.
    """
    try:
        if not (
            isinstance(digit_count, (int, float))
            and isinstance(target_sum, (int, float))
        ) or not (float(digit_count).is_integer() and float(target_sum).is_integer()):
            raise NotIntegerError("ƒê·∫ßu v√†o ph·∫£i l√† s·ªë nguy√™n")
        digits = abs(int(digit_count))
        total = abs(int(target_sum))
        if digits == 0 or total == 0:
            return "0"
        if total > 9 * digits:
            raise MathError("Khong the tao so voi tong chu so lon hon 9 * so chu so")
        result = ["9"] * (total // 9)
        if total % 9 != 0:
            result.append(str(total % 9))
        while len(result) < digits:
            result.append("0")
        return "".join(result[:digits])
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def pythagore(side_a, side_b, side_c):
    """
    T√≠nh c·∫°nh c√≤n l·∫°i trong tam gi√°c vu√¥ng.

    Tham s·ªë:
        - side_a (float or bool) - C·∫°nh a.
        - side_b (float or bool) - C·∫°nh b.
        - side_c (float or bool) - C·∫°nh c.

    Tr·∫£ l·∫°i:
        - str: K·∫øt qu·∫£ t√≠nh to√°n.

    N√©m l·ªói:
        - MathError: N·∫øu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.
    """
    try:
        sides = [side_a, side_b, side_c]
        false_count = sides.count(False)
        if false_count > 1:
            raise MathError("Ch·ªâ ƒë∆∞·ª£c ƒë·ªÉ m·ªôt c·∫°nh l√† False")
        for side in sides:
            if side is not False and (not isinstance(side, (int, float)) or side < 0):
                raise MathError("C·∫°nh ph·∫£i l√† s·ªë kh√¥ng √¢m")
        if side_a is False:
            if not (
                isinstance(side_b, (int, float)) and isinstance(side_c, (int, float))
            ):
                raise TypeErrorCustom("C·∫°nh ph·∫£i l√† s·ªë")
            side_b, side_c = float(side_b), float(side_c)
            if side_c < side_b:
                raise MathError("Canh huyen phai lon hon canh goc vuong")
            result = math.sqrt(side_c**2 - side_b**2)
            return f"Canh goc vuong 1 = {result}"
        elif side_b is False:
            if not (
                isinstance(side_a, (int, float)) and isinstance(side_c, (int, float))
            ):
                raise TypeErrorCustom("C·∫°nh ph·∫£i l√† s·ªë")
            side_a, side_c = float(side_a), float(side_c)
            if side_c < side_a:
                raise MathError("Canh huyen phai lon hon canh goc vuong")
            result = math.sqrt(side_c**2 - side_a**2)
            return f"Canh goc vuong 2 = {result}"
        elif side_c is False:
            if not (
                isinstance(side_a, (int, float)) and isinstance(side_b, (int, float))
            ):
                raise TypeErrorCustom("C·∫°nh ph·∫£i l√† s·ªë")
            side_a, side_b = float(side_a), float(side_b)
            result = math.sqrt(side_a**2 + side_b**2)
            return f"Canh huyen = {result}"
        raise MathError("Dau vao khong hop le")
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


# Quy lu·∫≠t sinh d√£y
def tao_danh_sach_quy_luat_1(total):
    """
    T·∫°o danh s√°ch theo quy lu·∫≠t: 1 s·ªë ‚ãÆ 1, 2 s·ªë ‚ãÆ 2, 3 s·ªë ‚ãÆ 3, ...

    Tham s·ªë:
        - total (int) - T·ªïng s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch theo quy lu·∫≠t.
    """
    try:
        if not isinstance(total, (int, float)) or not float(total).is_integer():
            raise NotIntegerError("T·ªïng s·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n")
        total = int(total)
        if total < 0:
            raise InvalidInputError("T·ªïng s·ªë l∆∞·ª£ng ph·∫£i kh√¥ng √¢m")
        result = []
        step = 1
        while len(result) < total:
            for _ in range(step):
                if len(result) < total:
                    result.append(step)
            step += 1
        return result
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_quy_luat_2(base, count):
    """
    T·∫°o danh s√°ch c√°c b·ªôi c·ªßa base v·ªõi count ph·∫ßn t·ª≠.

    Tham s·ªë:
        - base (int) - S·ªë ƒë·ªÉ t·∫°o b·ªôi.
        - count (int) - S·ªë ph·∫ßn t·ª≠.

    Tr·∫£ l·∫°i:
        list: Danh s√°ch c√°c b·ªôi c·ªßa base.
    """
    try:
        if not (
            isinstance(base, (int, float)) and isinstance(count, (int, float))
        ) or not (float(base).is_integer() and float(count).is_integer()):
            raise NotIntegerError("C·∫£ hai tham s·ªë ph·∫£i l√† s·ªë nguy√™n")
        base, count = int(base), int(count)
        if count < 0:
            raise InvalidInputError("S·ªë ph·∫ßn t·ª≠ ph·∫£i kh√¥ng √¢m")
        return [base * i for i in range(count)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_danh_sach_quy_luat_3(count, base):
    """
    T·∫°o danh s√°ch l≈©y th·ª´a c·ªßa base t·ª´ 0 ƒë·∫øn count.

    Tham s·ªë:
        - count (int) - S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠.
        - base (int) - C∆° s·ªë.

    Tr·∫£ l·∫°i:
        - list: Danh s√°ch l≈©y th·ª´a c·ªßa base.
    """
    try:
        if not (
            isinstance(count, (int, float)) and isinstance(base, (int, float))
        ) or not (float(count).is_integer() and float(base).is_integer()):
            raise NotIntegerError("C·∫£ hai tham s·ªë ph·∫£i l√† s·ªë nguy√™n")
        count, base = int(count), int(base)
        if count < 0:
            raise InvalidInputError("S·ªë l∆∞·ª£ng ph·∫£i kh√¥ng √¢m")
        return [base**i for i in range(count)]
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


# ƒê·∫øm s·ªë ngh·ªãch th·∫ø
def dem_so_nghich_the(numbers):
    """
    ƒê·∫øm s·ªë c·∫∑p ngh·ªãch th·∫ø trong danh s√°ch.

    Tham s·ªë:
        - numbers (list) - Danh s√°ch c·∫ßn ƒë·∫øm.

    Tr·∫£ l·∫°i:
        - int: S·ªë c·∫∑p ngh·ªãch th·∫ø.
    """
    try:
        if not isinstance(numbers, (list, tuple)):
            raise ListError("ƒê·∫ßu v√†o ph·∫£i l√† danh s√°ch ho·∫∑c tuple")
        for num in numbers:
            if not isinstance(num, (int, float)):
                raise TypeErrorCustom("Ph·∫ßn t·ª≠ ph·∫£i l√† s·ªë")
        count = 0
        for i in range(len(numbers)):
            for j in range(i + 1, len(numbers)):
                if numbers[i] > numbers[j]:
                    count += 1
        return count
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá")


def one_two_three():
    """
    Ch∆°i k√©o b√∫a bao v·ªõi A.I.

    Tham s·ªë:
        None

    Tr·∫£ l·∫°i:
        None: In k·∫øt qu·∫£ ra m√†n h√¨nh.

    H∆∞·ªõng d·∫´n:
        - Nh·∫≠p s·ªë tr·∫≠n ƒë·∫•u.
        - Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (Keo, Bua, Bao).
    """
    choices = {1: "Keo", 2: "Bua", 3: "Bao"}
    human_score, ai_score = 0, 0
    try:
        matches = input("- Number of matches: ")
        if not matches.isdigit():
            raise NotIntegerError("S·ªë tr·∫≠n ƒë·∫•u ph·∫£i l√† s·ªë nguy√™n")
        matches = int(matches)
        if matches <= 0:
            raise InvalidInputError("S·ªë tr·∫≠n ƒë·∫•u ph·∫£i l·ªõn h∆°n 0")
        for _ in range(matches):
            ai_choice = choices[random.randint(1, 3)]
            user_input = input("- User's choice: ").title()
            print(f"- User's chosen = {user_input}, A.I's chosen = {ai_choice}")
            if user_input not in ["Keo", "Bua", "Bao"]:
                print(">>> ! ERROR !")
                continue
            if user_input == ai_choice:
                print(">>> DRAW")
            elif (
                (user_input == "Keo" and ai_choice == "Bao")
                or (user_input == "Bua" and ai_choice == "Keo")
                or (user_input == "Bao" and ai_choice == "Bua")
            ):
                print(">>> USER WON")
                human_score += 1
            else:
                print(">>> A.I WON")
                ai_score += 1
        print("- RESULT:")
        if human_score > ai_score:
            print(
                f">>> User's won with {human_score} point(s), A.I's lost with {ai_score} point(s)"
            )
        elif ai_score > human_score:
            print(
                f">>> A.I's won with {ai_score} point(s), User's lost with {human_score} point(s)"
            )
        else:
            print(">>> DRAW")
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")


def tao_day_chu(rows, columns, repeats):
    """
    T·∫°o d√£y ch·ªØ v·ªõi rows d√≤ng, columns c·ªôt, 2 ƒë∆∞·ªùng ch√©o, l·∫∑p l·∫°i repeats l·∫ßn.

    Tham s·ªë:
        rows (int): S·ªë d√≤ng.
        columns (int): S·ªë c·ªôt.
        repeats (int): S·ªë l·∫ßn l·∫∑p l·∫°i.

    Tr·∫£ l·∫°i:
        None: In d√£y ch·ªØ ra m√†n h√¨nh.

    H∆∞·ªõng d·∫´n:
        - Nh·∫≠p chu·ªói ƒë·∫ßu ti√™n khi ƒë∆∞·ª£c y√™u c·∫ßu.
    """
    try:
        if not (
            isinstance(rows, (int, float))
            and isinstance(columns, (int, float))
            and isinstance(repeats, (int, float))
        ) or not (
            float(rows).is_integer()
            and float(columns).is_integer()
            and float(repeats).is_integer()
        ):
            raise NotIntegerError("T·∫•t c·∫£ tham s·ªë ph·∫£i l√† s·ªë nguy√™n")
        rows, columns, repeats = int(rows), int(columns), int(repeats)
        if rows <= 0 or columns <= 0 or repeats < 0:
            raise InvalidInputError(
                "S·ªë d√≤ng, c·ªôt ph·∫£i l·ªõn h∆°n 0, s·ªë l·∫ßn l·∫∑p ph·∫£i kh√¥ng √¢m"
            )
        text = input("Nhap day dau tien: ")
        if not isinstance(text, str) or not text:
            raise InvalidInputError("Chu·ªói ƒë·∫ßu v√†o kh√¥ng th·ªÉ r·ªóng")
        for _ in range(repeats):
            for _ in range(columns):
                for _ in range(rows):
                    print(text)
            for i in range(rows):
                print("  " * i + text)
            for i in range(rows - 1, -1, -1):
                print("  " * i + text)
    except (ValueError, TypeError):
        raise TypeErrorCustom("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i s·ªë")
